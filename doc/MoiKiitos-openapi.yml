openapi: 3.0.0
servers: [{url: "http://localhost:8080"}]
info:
  description: This is a simple API
  version: "1.0.0"
  title: MoiKiitos
  contact:
    email: dengdajin@qq.com

tags:
  - name: account
    description:  auth  api
  - name: user
    description:  user  api
  - name: post
    description:   feed post api
paths:

  /account/registration:
    post:
      tags:
        - account
      summary: register a new user
      description: register a new user
      responses:
        '201':
          description: user account created
        '409':
          description: name or email already exists
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: Sean
                email:
                  type: string
                  format: email
                  example: dengdajin@gmail.com
                password:
                  type: string
                  example: 123456
              type: object

  /account/login:
    post:
      tags:
        - account
      summary: user login
      description: user login to the system
      responses:
        '204':
          description: login successful
        '400':
          description: 'account or password not exists '
      requestBody:
        content:
          application/json:
            schema:
              properties:
                nameOrEmail:
                  type: string
                  example: Sean
                password:
                  type: string
                  example: 123456
              type: object
  /account/logout:
    post:
      tags:
        - account
      summary: user logout
      description: user logout
      responses:
        '204':
          description: successful

  /users:
    get:
      tags:
        - user
      summary: find users
      description: find users
      parameters:
        - in: query
          name: nameOrEmail
          description: pass user name or email address
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
            default: 10
      responses:
        '200':
          description: search successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{name}/following:
    get:
      tags:
        - user
      summary: find users
      description: find users
      parameters:
        - in: path
          name: name
          description: user name
          required: true
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
            default: 10
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{name}/followers:
    get:
      tags:
        - user
      summary: find users
      description: find users
      parameters:
        - in: path
          name: name
          description: user name
          required: true
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
            default: 10
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{name}/follow:
    post:
      tags:
        - user
      summary: follow user
      description: follow user api
      parameters:
        - in: path
          name: name
          description: user name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful
  /users/{name}/unfollow:
    post:
      tags:
        - user
      summary: unfollow user
      description: unfollow user api
      parameters:
        - in: path
          name: name
          description: user name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful
  /posts:
    post:
      tags:
        - post
      summary: submit a new post
      description: submit a new post
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        description: Inventory item to add
  /feed/{userName}:
    get:
      tags:
        - post
      summary: user's feed
      description: Gets the feed of posts from a specific user
      parameters:
        - in: path
          name: userName
          description: pass an optional search string for looking up inventory
          required: true
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: bad input parameter

components:
  schemas:
    User:
      properties:
        name:
          type: string
          example: Sean
        email:
          type: string
          format: email
          example: dengdajin@gmail.com
      type: object
    Post:
      type: object
      required:
        - content
      properties:
        id:
          type: number
          example: 1
        content:
          type: string
          example: I feel happy today.
        postAt:
          type: string
          format: date-time
          example: '2024-02-25T09:12:33.001Z'